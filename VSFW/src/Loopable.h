#ifndef Loopable_h
#define Loopable_h

/*
* Абстрактный класс обрабатываемых сущностей, все классы реальных объектов должны наследоваться от этого класса и менять свое состояние в методе loop
* !!!Все наследники не имеют право быть разрушены, они должны создаваться однажды и существовать на всем протяжении выполнения (на лету внешние устройства не подключаем :)
*/
class Loopable
{
  //Первая из обрабатываемых сущностей
  static Loopable *firstLoopable;
  static unsigned long MAX_U_LONG;
  
  //Следующая обрабатываемая сущность (таким образом имеем список всех обрабатываемых сущностей, он статичен и навсегда)
  Loopable *nextLoopable;
  //Через сколько микросекунд (0.000001 s) времени произойдет следующий вызов обработчика
  unsigned long interval;
  //Точка отсчета относительно которой будет откладываться интервал и сравниваться с текущей точкой времени
  unsigned long startTime;

public:
  //Обработать все обрабатываемые, обработает все сущности для которых настало время обработки
  static void loopAll();

protected:
  Loopable();

  //Вызывается каждый раз как настало время
  virtual void loop() = 0;
  //Установить интервал в микросекундах (0.000001 s), через который произойдет очередной вызов loop
  void setInterval(unsigned long interval);
};



#endif // !Loopable_h
#ifndef Register_h
#define Register_h

/*
* Регистр (один из регистров (микросхем) подключенных через выход или сигналы входа)
*/
class Register
{
  /*
  * Счетчик дешифратор, (Имеет 16 выводов на каждый из которых мы можем повесить или регистр вывода или ввод данных, нужен для последовательной обработки большого количества устройств)
  * Настраивает биты процессора, переключает выход
  */
  class Quit
  {
    QUIT curQuit;  //Текущий активный выход (при старте нулевой)
  
  public:
    static Quit instance;       //Синглтон

  private:
    Quit();
 
    //Переключить счетчик дешифратор на след. выход
    unsigned char goNextQuit();

  public:
    //Задать текущий выход
    void setQuit(QUIT quit);
    //Подать импулься для записи данных в регистры, (INH), текущий выход становится активным на время импулься
    void INH();
    //Включить импульс для чтения
    void INH_on();
    //Выключить импульс для чтения
    void INH_off();

    //Вернуть тип текущего выхода
    static int getIo(QUIT quit);
  };


  //================================================================
  uint8_t bits; //Биты регистра
  QUIT quit;    //Используемый регистром выход
public:
  Register(QUIT quit);

  //Записать биты в регистр (в соответствующую микросхему)
  void write();
  //Прочитать биты (прочитает текущие сигналы на ножках микросхемы)
  void read();

  //Установить бит
  void setBit(uint8_t bit, int state);
  //Прочитать бит
  int getBit(uint8_t bit);
  //Установить все биты
  void setRegister(uint8_t bits);
  //Прочитать все биты
  uint8_t getRegister();
};


#endif // !Register_h